from django.core import management
from django.test import TestCase
from django.conf import settings
from cStringIO import StringIO
import sys

import os
from datetime import datetime
import ftplib
import urllib
import shutil
import tempfile
import time
from tools import localfile, remotefile
from unittest import TestCase as TCase
from Bio.PDB import *

# The fixture used for this test file can be regenerated by the
# following process:

# 1.  Empty the database of all proteins.
#     $ python manage.py coredb --clear
# 2.  Populate the database.
#     $ PDB_LOCAL_DIR=./pgd_splicer/testfiles \
#       ./pgd_splicer/ProcessPDBTask.py --pipein < \
#       ./pgd_splicer/testfiles/fixture_selection.txt
# 3.  Write the fixture from the database.
#     $ python manage.py dumpdata pgd_core --indent 2 --format json > \
#       ./pgd_splicer/fixtures/pgd_splicer.json


class MonkeyPatch:

    # This class monkeypatches the network modules to provide a
    # controlled environment for testing.

    @staticmethod
    def sitefile(filename):
        # All test files are stored in the same place.
        return os.path.join('pgd_splicer/testfiles', filename)

    @staticmethod
    def localfile(filename):
        # All local files are stored in the localdir.
        return os.path.join(settings.PDB_LOCAL_DIR, filename)

    class FTP:
        def __init__(self, host):
            self.host = host

        def login(self):
            pass

        def cwd(self, remotedir):
            pass

        def sendcmd(self, command):
            cmdlist = command.split(' ')
            if cmdlist[0] == 'MDTM':
                filename = cmdlist[1]
                try:
                    rawmtime = os.path.getmtime(filename)
                    rawstamp = datetime.fromtimestamp(rawmtime)
                    # return 20090301142529 for '03/01/2009 14:25:29 GMT'
                    return "213 %s" % rawstamp.strftime('%Y%m%d%H%M%S')
                except OSError:
                    # If file does not exist, the FTP server will
                    # return a permanent error.
                    raise ftplib.error_perm
            else:
                # NB: Raise exception if unsupported command is used.
                return False

        def size(self, filename):
            # If the file exists, return its size.  If it doesn't, return None.
            try:
                return os.path.getsize(filename)
            except OSError:
                return None

        def retrbinary(self, command, callback, blocksize=8192, rest='REST'):
            # If the file exists, 'download' it.  If it doesn't, return False.
            cmdlist = command.split(' ')
            if cmdlist[0] == 'RETR':
                filename = cmdlist[1]
                try:
                    with open(filename) as f:
                        while 1:
                            data = f.read(blocksize)
                            if not data:
                                break
                            callback(data)
                except OSError:
                    return False
            else:
                # NB: Raise exception if unsupported command is used.
                return False

    class urlopen:
        def __init__(self, url, data=None, proxies=None):
            # List of known URLs and their corresponding files.
            baseURL = 'http://dunbrack.fccc.edu/Guoli/culledpdb_hh/'
            pc25 = baseURL + '/cullpdb_pc25_res3.0_R1.0_d130614_chains8184.gz'
            pc90 = baseURL + '/cullpdb_pc90_res3.0_R1.0_d130614_chains24769.gz'
            knownurls = {baseURL: 'selection_page.txt',
                         pc25: 'cullpdb_pc25.gz',
                         pc90: 'cullpdb_pc90.gz'}

            self.url = url
            if self.url in knownurls:
                self.fileobj = open(MonkeyPatch.sitefile(knownurls[self.url]))
            else:
                self.fileobj = None

        def read(self):
            if self.fileobj is None:
                return None
            else:
                return self.fileobj.read()

        def readline(self):
            if self.fileobj is None:
                return None
            else:
                return self.fileobj.readline()

        def readlines(self):
            if self.fileobj is None:
                return None
            else:
                return self.fileobj.readlines()

        def fileno(self):
            if self.fileobj is None:
                return None
            else:
                return self.fileobj.fileno()

        def close(self):
            if self.fileobj is None:
                return None
            else:
                return self.fileobj.close()

        def info(self):
            if self.fileobj is None:
                return None
            else:
                return self.fileobj.info()

        def getcode(self):
            if self.fileobj is None:
                return 404
            else:
                return 200

        def geturl(self):
            return self.url

    def __enter__(self):
        # Override existing FTP and urlopen with our versions.
        self.old_FTP = ftplib.FTP
        ftplib.FTP = MonkeyPatch.FTP
        self.old_urlopen = urllib.urlopen
        urllib.urlopen = MonkeyPatch.urlopen
        self.old_remote_dir = settings.PDB_REMOTE_DIR
        settings.PDB_REMOTE_DIR = 'pgd_splicer/testfiles'
        self.old_local_dir = settings.PDB_LOCAL_DIR
        settings.PDB_LOCAL_DIR = tempfile.mkdtemp()

        # Replace all PDB entries with our test entries.
        codes = ['1mwq', '1mww', '1twf', '3cgm', '3cgx', '3cgz', '1h0h', '3eoj', '3oxp']
        for code in codes:
            lfile = localfile(code)
            rfile = remotefile(code)

            if os.path.exists(rfile):
                ldir = os.path.dirname(lfile)
                if not os.path.exists(ldir):
                    os.makedirs(ldir)

                shutil.copy2(rfile, lfile)
            else:
                print "%s: site file does not exist, oh no!" % rfile

    def __exit__(self, type, value, traceback):
        # Clean up overrides
        ftplib.FTP = self.old_FTP
        urllib.urlopen = self.old_urlopen
        shutil.rmtree(settings.PDB_LOCAL_DIR)
        settings.PDB_LOCAL_DIR = self.old_local_dir
        settings.PDB_REMOTE_DIR = self.old_remote_dir


class ManagementCommands(TestCase):

    fixtures = ['pgd_splicer']

    def setUp(self):
        self.out = StringIO()
        self.err = StringIO()

    def test_fetch_old(self):
        # How far into the past do we set the test files?
        howfar = 86400 * 365 * 10

        # This requires the 3CGX protein file but does not require the
        # 1MWQ protein file.
        proteins = ['3cgx', '1mwq']

        # The modification times of the files after they are set into the past.
        olddates = {}

        # The modification times after the management command returns.
        postdates = {}

        # The management command should ignore 1MWQ and add 3CGX.
        with MonkeyPatch():

            # Set the file dates back!
            for key in proteins:
                olddates[key] = int(os.path.getmtime(localfile(key)))
                os.utime(localfile(key), (-1, olddates[key] - howfar))

            # Run the management command.
            management.call_command('fetch', stdout=self.out)

            # Record the file dates now.
            for key in proteins:
                postdates[key] = int(os.path.getmtime(localfile(key)))

            # Only the 3CGX file should have been updated.
            self.assertEqual(postdates['3cgx'], int(time.time()))
            self.assertLess(postdates['1mwq'], olddates['1mwq'])

            # The 3CGX file should be larger than 8192 bytes.
            self.assertGreater(os.path.getsize(localfile('3cgx')), 8192)

    def test_fetch_missing(self):

        # This requires the 3CGX protein file but does not require the
        # 1MWQ protein file.
        proteins = ['3cgx', '1mwq']

        with MonkeyPatch():
            # The management command should ignore 1MWQ and add 3CGX.

            # Remove the files if they exists.
            for key in proteins:
                if os.path.exists(localfile(key)):
                    os.remove(localfile(key))

            # Run the management command.
            management.call_command('fetch', stdout=self.out)

            # Only the 3CGX file should now exist.
            self.assertTrue(os.path.exists(localfile('3cgx')))
            self.assertFalse(os.path.exists(localfile('1mwq')))

            # The 3CGX file should be larger than 8192 bytes.
            self.assertGreater(os.path.getsize(localfile('3cgx')), 8192)

    @staticmethod
    def file_to_dict(infile):
        my_dict = {}
        with open(infile) as data:
            for line in data:
                words = line.split()
                if words[0] == 'VERSION:':
                    continue
                my_dict[words[0]] = words[1:]
        return my_dict

    def test_fetch_selection(self):

        with MonkeyPatch():
            # The original selection file, with bad 1MWQ and no 3CGX.
            good_selection = MonkeyPatch.sitefile('fixture_selection.txt')
            good_dict = self.file_to_dict(good_selection)
            # Remove 1MWQ.
            del good_dict['1MWQ']
            # Add 3CGX.
            good_dict['3CGX'] = ['A', '25', '1.900', '0.17', '0.21']
            test_selection = MonkeyPatch.localfile('test_selection.txt')
            management.call_command('fetch', stdout=self.out, selection=test_selection)
            test_dict = self.file_to_dict(test_selection)
            self.assertEqual(good_dict, test_dict)
            if os.path.exists(test_selection):
                os.remove(test_selection)

    def test_crosscheck_fixture(self):

        # Cross-check the database against the fixture selection.txt file.
        old_stdout = sys.stdout
        sys.stdout = StringIO()
        selection = MonkeyPatch.sitefile('fixture_selection.txt')
        management.call_command('crosscheck', [],
                                selection=selection, verbose=True)
        test_out = sys.stdout.getvalue()
        sys.stdout.close()
        sys.stdout = old_stdout

        good_out = MonkeyPatch.sitefile('fixture_crosscheck.txt')
        self.assertEqual(test_out, file(good_out).read())

    def test_crosscheck_cullpdb(self):

        # Cross-check the database against the cullpdb selection.txt file.
        old_stdout = sys.stdout
        sys.stdout = StringIO()
        selection = MonkeyPatch.sitefile('cullpdb_selection.txt')
        management.call_command('crosscheck', [],
                                selection=selection, verbose=True)
        test_out = sys.stdout.getvalue()
        sys.stdout.close()
        sys.stdout = old_stdout

        good_out = MonkeyPatch.sitefile('cullpdb_crosscheck.txt')
        self.assertEqual(test_out, file(good_out).read())


class ProcessPDBTask(TestCase):

    def test_import_pdb(self):

        # Log only errors to the console!
        import logging
        logging.basicConfig(level=logging.ERROR)

        codes = {}
        with open(MonkeyPatch.sitefile('fixture_selection.txt'), 'r') as f:
            for line in f:
                codes[line.split(' ')[0]] = line

        check = { 
            '3EOJ': {
                'A': {
                    30: { "occm" : 0.52, },
                    125: { "occm": 0.66, },
                    208: { "occm": 0.39, },
                }
            },
            '3OXP': {
                'A': {
                    2: { "ss": "H", },
                    3: { "ss": "H", },
                    4: { "ss": "H", },
                    5: { "ss": "H", },
                    57: { "ss": "E", },
                    58: { "ss": "E", },
                    59: { "ss": "E", },
                    62: { "ss": "E", },
                }
            }
        }

        for code in check:
            if code not in codes:
                self.fail('code {} not in selection file'.format(code))

            # Install that protein into the database with ProcessPDBTask.
            pdbs = [codes[code]]
            from ProcessPDBTask import ProcessPDBTask
            task = ProcessPDBTask()

            # The protein file is in the local file directory.
            with MonkeyPatch():
                task.work(pdbs)

            # Confirm that that protein was added.
            from pgd_core.models import Protein
            try:
                p = Protein.objects.get(code=code)
            except Protein.DoesNotExist:
                self.fail("code {} not in database -- add failed".format(code))
            except:
                self.fail("Unknown exception")

            # Check that no residues are malformed.
            from pgd_constants import AA_CHOICES, SS_CHOICES
            valid_aa = [x[0] for x in AA_CHOICES]
            valid_ss = [x[0] for x in SS_CHOICES]
            # '-' is valid and not in SS_CHOICES
            valid_ss.append('-')
            for c in p.chains.all():
                for r in c.residues.all():
                    # Is amino acid valid?
                    if r.aa not in valid_aa:
                        self.fail("%s %s res %s: aa %s is invalid" % (p.code, c.code, r.chainIndex, r.aa))
                    # Is secondary structure valid?
                    if r.ss not in valid_ss:
                        self.fail("%s %s res %s: ss %s is invalid" % (p.code, c.code, r.chainIndex, r.ss))
                    # Are phi/psi/ome/omep values within limits?
                    if r.phi is not None and abs(r.phi) >= 180.0:
                        self.fail("%s %s res %s: phi value invalid: %f" % (p.code, c.code, r.chainIndex, r.phi))
                    if r.psi is not None and abs(r.psi) >= 180.0:
                        self.fail("%s %s res %s: psi value invalid: %f" % (p.code, c.code, r.chainIndex, r.psi))
                    if r.ome is not None and abs(r.ome) >= 180.0:
                        self.fail("%s %s res %s: ome value invalid: %f" % (p.code, c.code, r.chainIndex, r.ome))
                    if r.omep is not None and abs(r.omep) >= 180.0:
                        self.fail("%s %s res %s: omep value invalid: %f" % (p.code, c.code, r.chainIndex, r.omep))

            # Check pre-selected parameters.
            for chain in check[code]:
                c = p.chains.get(code=chain)
                for oldID in check[code][chain]:
                    r = c.residues.get(oldID=oldID)
                    for k, v in check[code][chain][oldID].iteritems():
                        try:
                            actual = getattr(r, k)
                            if v != actual:
                                self.fail("{} {}/{} {}: expected {}, got {}".format(code, chain, oldID, k, v, actual))
                        except AttributeError:
                            self.fail("{} {}/{} {}: not found in this residue".format(code, chain, oldID, k))
